%% -*- mode: erlang; -*-
[
 { grb, []},
  %% logger config
  {kernel, [

    % main level
    {logger_level, all},

    % logger formatters
    {logger, [
        {handler, default, logger_disk_log_h,
            #{config => #{file => "log/console.log",
                          type => wrap,
                          max_no_files => 10,
                          max_no_bytes => 52428800}, % 10x5mb
              level => info,
              formatter => {logger_formatter, #{single_line => false,
                                                max_size => 2048}}}}
    ]}
  ]},

  {riak_core, [
    %% riak directories
    {ring_state_dir, "data/data_riak_core"},
    {platform_data_dir, "data/data_riak_core"},

    %% determines how many vnodes will be used
    %% also determines the number of files the log is sliced into
    %% has to be an exponent of 2
    %% low number will decrease file accesses (good for testing) and boot time
    %% high number enables scaling and generates smaller log files
    {ring_creation_size, ${RIAK_RING_SIZE}},

    {handoff_port, ${RIAK_HANDOFF_PORT}}
  ]},

  {grb, [
    %% Configuration for GRB coming form the command line
    %% The (public) IP of this node. We could also get this using inet:getif
    {inter_dc_ip, "${INTER_DC_IP}"},

    %% The port to listen for client commands (default is 7878)
    {tcp_port, ${TCP_LIST_PORT}},
    {tcp_id_len_bits, ${TCP_ID_LEN}},

    %% The port to send/recv inter-dc communication (default is 8989)
    {inter_dc_port, ${INTER_DC_PORT}},

    %% How many readers per oplog vnode
    {oplog_readers, ${OP_LOG_READERS}},

    %% How many versions to keep per key
    {version_log_size, ${VSN_LOG_SIZE}},

    %% Timer intervals, in ms.
    %%
    %% How often do we increase our own knownVC entry?
    %% Usually, this entry is updated either when a blue transaction
    %% is committed, or when propagating blue transactions in the background.
    %% Given that background propagation is less frequent, and that a
    %% partition might not receive transactions in a while, we need to perform
    %% automatic ticks from time time.
    {self_blue_heartbeat_interval, ${SELF_HB_INTERVAL_MS}},

    %% How often do we replicate _our_ transactions to other replicas?
    {basic_replication_interval, ${REPLICATION_INTERVAL_MS}},

    %% How often do we check for abandoned blue transactions in preparedBlue.
    %% If a client never sends a decide, it might stall the entire system.
    %% Set to 0 to disable this check.
    {prepared_blue_stale_check_ms, ${PREPARED_BLUE_STALE_MS}},

    %% How often do we replicate _other's_ transactions to other replicas?
    %% This is done in case of replica failure, to ensure that if we receive a
    %% transaction, it will eventually get delivered to every replica.
    %% It doesn't make sense to do this on every replication step, since it can
    %% be expensive. We can set it so that most of the time, there won't be anything
    %% to replicate (since we know about other's visibility level when they send us
    %% their clocks, it can be high, say 5 seconds).
    %% This avoids innecessary duplication of transactions in the wire and ensures
    %% that we will only replicate transactions in the case of replica failure.
    {uniform_replication_interval, ${UNIFORM_REPLICATION_INTERVAL_MS}},

    %% How often do we send our knownVC/stableVC to other replicas?
    %% Only applicable on the uniform profile.
    {remote_clock_broadcast_interval, ${UNIFORM_CLOCK_INTERVAL_MS}},

    %% The `f` to take into account when computing the group size for uniformVC.
    %% When `uniform_visibility_factor + 1` replicas have seen an update, we can
    %% advance that entry.
    {uniform_visibility_factor, ${UNIFORM_VISIBILITY_FACTOR}},

    %% How often should we propagate our knownVC to local partitions?
    %%
    %% This is used to update stableVC inside the local data center,
    %% as well as the uniformVC entry for the local replica.
    {local_broadcast_interval, ${BCAST_KNOWN_VC_INTERVAL_MS}},

    %% Number of ms to wait before re-checking `wait` statements on GET_KEY_VSN
    %% and COMMIT_BLUE.
    {partition_ready_wait_ms, ${PARTITION_RETRY_MS}},

    %% How often to prune the logs of all replicas
    {prune_committed_blue_interval, ${COMMITTED_BLUE_PRUNE_INTERVAL_MS}},

    %% Pool size for the red transaction coordinator
    {red_coord_pool_size, ${RED_COORD_POOL_SIZE}},

    %% How long in the future do we schedule a strong heartbeat.
    %% Set this value to 0 to never schedule a heartbeat.
    {red_heartbeat_schedule_ms, ${RED_HB_SCHEDULE_MS}},

    %% How often do we check for ready transactions/heartbeats in decidedRed
    {red_delivery_interval, ${RED_DELIVER_INTERVAL_MS}},

    %% How often do we prune our local decidedRed?
    %% Set this value to 0 to disable it
    {red_prune_interval, ${RED_PRUNE_INTERVAL}},

    %% Conflicts file for red transactions.
    {red_conflicts_config, #{
        <<"default">> => <<"default">>,
        <<"rubis/registerUser">> => <<"rubis/registerUser">>,
        <<"rubis/storeBuyNow">> => <<"rubis/storeBuyNow">>,
        <<"rubis/placeBid">> => <<"rubis/closeAuction">>,
        <<"rubis/closeAuction">> => <<"rubis/placeBid">>
    }}
  ]}
].
