%% -*- mode: erlang; -*-
[
 { grb, []},
  %% logger config
  {kernel, [

    % main level
    {logger_level, all},

    % logger formatters
    {logger, [
        {handler, default, logger_disk_log_h,
            #{config => #{file => "log/console.log",
                          type => wrap,
                          max_no_files => 10,
                          max_no_bytes => 52428800}, % 10x5mb
              level => info,
              formatter => {logger_formatter, #{single_line => false,
                                                max_size => 2048}}}}
    ]}
  ]},

  {riak_core, [
    %% riak directories
    {ring_state_dir, "data/data_riak_core"},
    {platform_data_dir, "data/data_riak_core"},

    %% determines how many vnodes will be used
    %% also determines the number of files the log is sliced into
    %% has to be an exponent of 2
    %% low number will decrease file accesses (good for testing) and boot time
    %% high number enables scaling and generates smaller log files
    {ring_creation_size, ${RIAK_RING_SIZE}},

    {handoff_port, ${RIAK_HANDOFF_PORT}}
  ]},

  {grb, [
    %% Configuration for GRB coming form the command line
    %% The IP of this node. We can get this using inet:getif,
    %% but we already told the node which IP to use use in vm.args,
    %% so might as well use that one, too.
    {bounded_ip, "${IP}"},

    %% The port to listen for client commands (default is 7878)
    {tcp_port, ${TCP_LIST_PORT}},
    {tcp_id_len_bits, ${TCP_ID_LEN}},

    %% The port to send/recv inter-dc communication (default is 8989)
    {inter_dc_port, ${INTER_DC_PORT}},

    %% Auto-start book-keeping processes in the background
    %% These processes should start after the ring for a cluster
    %% is fully connected. If the node is not going to be joined
    %% with others, it makes sense to start it with these processes
    %% enabled by default.
    {auto_start_background_processes, false},

    %% How many versions to keep per key
    {version_log_size, ${VSN_LOG_SIZE}},

    %% todo(borja): Play with these settings.
    %% Timer intervals, in ms.
    %%
    %% How often do we increase our own knownVC entry?
    %% Usually, this entry is updated either when a blue transaction
    %% is committed, or when propagating blue transactions in the background.
    %% Given that background propagation is less frequent, and that a
    %% partition might not receive transactions in a while, we need to perform
    %% automatic ticks from time time.
    {self_blue_heartbeat_interval, ${SELF_HB_INTERVAL_MS}},

    %% How often do we replicate _our_ transactions to other replicas?
    {basic_replication_interval, ${REPLICATION_INTERVAL_MS}},

    %% How often do we replicate _other's_ transactions to other replicas?
    %% This is done in case of replica failure, to ensure that if we receive a
    %% transaction, it will eventually get delivered to every replica.
    %% It doesn't make sense to do this on every replication step, since it can
    %% be expensive. We can set it so that most of the time, there won't be anything
    %% to replicate (since we know about other's visibility level when they send us
    %% their clocks, it can be high, say 5 seconds).
    %% This avoids innecessary duplication of transactions in the wire and ensures
    %% that we will only replicate transactions in the case of replica failure.
    {uniform_replication_interval, ${UNIFORM_REPLICATION_INTERVAL_MS}},

    %% How often do we send our knownVC/stableVC to other replicas?
    %% (only applicable on the uniform_improved rebar profile)
    {remote_clock_broadcast_interval, ${UNIFORM_CLOCK_INTERVAL_MS}},

    %% How often should we propagate our knownVC to local partitions?
    %%
    %% This is used to update stableVC inside the local data center,
    %% as well as the uniformVC entry for the local replica.
    {local_broadcast_interval, ${BCAST_KNOWN_VC_INTERVAL_MS}},

    %% Number of ms to wait before re-checking `wait` statements on OP_REQUEST
    %% and COMMIT_BLUE. For OP_REQUEST, it will wait until knownVC[d] > snapshotVC[d],
    %% which is bounded by the clock interval time, so we set it to the same value.
    %% todo(borja): revisit
    {op_prepare_wait_ms, ${SELF_HB_INTERVAL_MS}},

    %% How often to prune the logs of all replicas
    {prune_committed_blue_interval, ${COMMITTED_BLUE_PRUNE_INTERVAL_MS}}
  ]}
].
